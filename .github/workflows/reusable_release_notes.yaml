name: Reusable Release Notes Generator

on:
  workflow_dispatch:
    inputs:
      from-tag:
        description: 'Start tag (if not specified, the first commit is used) (sample 1.0.0)'
        required: false
        type: string
      to-tag:
        description: 'End tag (if not specified, the latest commit is used) (sample 1.0.0)'
        required: false
        type: string
      commit-message-format:
        description: 'Commit message format. See https://git-scm.com/docs/pretty-formats'
        required: false
        type: string
        default: "- %s by %cn (%h)"
  workflow_call:
    inputs:
      from-tag:
        description: 'Start tag (if not specified, the first commit is used)'
        required: false
        type: string
      to-tag:
        description: 'End tag (if not specified, the latest commit is used)'
        required: false
        type: string
      commit-message-format:
        description: 'Commit message format. See https://git-scm.com/docs/pretty-formats'
        required: false
        type: string
        default: "- %s by %cn (%h)"
    outputs:
      notes:
        description: 'Generated release notes'
        value: ${{ jobs.generate-notes.outputs.notes }}

jobs:
  generate-notes:
    runs-on: ubuntu-latest
    outputs:
      notes: ${{ steps.release-notes.outputs.notes }}
    env:
      FILTER_CONDITION: "fix|feat|docs|style|refactor|perf"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags

      - name: Determine range
        id: determine-range
        run: |
          echo "Checking the specified tags..."
          # If the start tag is empty, fetch the hash of the first commit
          if [ -z "${{ inputs.from-tag }}" ]; then
            from_commit=$(git rev-list --max-parents=0 HEAD)  # Fetch the first commit
            echo "Start tag is not specified. Using the first commit (${from_commit}) as the start point."
          else
            from_commit="${{ inputs.from-tag }}"
            echo "Specified start tag: ${from_commit}"
          fi
          
          if [ -z "${{ inputs.to-tag }}" ]; then
            to_commit="HEAD"
            echo "End tag is not specified. Using HEAD (${to_commit}) as the end point."
          else
            to_commit="${{ inputs.to-tag }}"
            echo "Specified end tag: ${to_commit}"
          fi
          
          echo "::set-output name=from_commit::$from_commit"
          echo "::set-output name=to_commit::$to_commit"

      - name: Generate filtered release notes
        id: release-notes
        run: |
          echo "Fetching commit range:"
          echo "Start: ${{ steps.determine-range.outputs.from_commit }}"
          echo "End: ${{ steps.determine-range.outputs.to_commit }}"
          echo "Filter conditions: $FILTER_CONDITION"

          notes=$(git log ${{ steps.determine-range.outputs.from_commit }}..${{ steps.determine-range.outputs.to_commit }} --pretty=format:"${{ inputs.commit-message-format }}" | grep -iE "$FILTER_CONDITION" || echo "No matching commits found.")

          echo "::group::Notebook Contents"
          echo "$notes"
          echo "::endgroup::"
          
          {
            echo "notes<<EOF"
            echo "$notes"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"