name: build-release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "tag: git tag you want create. (sample 1.0.0)"
        required: true
        type: string
      dry-run:
        description: "dry-run: true will never create relase/nuget."
        required: true
        default: false
        type: boolean

jobs:
  generate-token:
    runs-on: ubuntu-latest
    outputs:
      token: ${{ steps.app-token.outputs.token }}
    steps:
      - name: Generate Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

  validate:
    needs: [generate-token]
    uses: Cysharp/Actions/.github/workflows/validate-tag.yaml@main
    with:
      tag: ${{ inputs.tag }}
    secrets: inherit

  update-packagejson:
    needs: [validate]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      sha: ${{ steps.commit.outputs.sha }}
      branch-name: ${{ steps.configure.outputs.branch-name }}
      is-branch-created: ${{ steps.commit.outputs.is-branch-created }}
    steps:
      - name: Checkout Repository with Overridden Token
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Configure Output variables
        id: configure
        run: |
          echo "branch-name=test-release/${{ inputs.tag }}" | tee -a "$GITHUB_OUTPUT"

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      # package.json
      # "version": 1.2.3 -> "version": 2.0.0
      # plugin.cfg
      # version="1.2.3" -> version="2.0.0"
      #
      # TIPS: `grep -v "^$"` is used to remove empty line.
      - name: Update files to version ${{ needs.validate.outputs.normalized_tag }}
        run: |
          expected="${{ needs.validate.outputs.normalized_tag }}"
          while read -r file_path; do
            if [[ "$file_path" == "" ]]; then continue; fi

            echo "Start $file_path"
            file_name=$(basename "$file_path")

            echo "::group::Before"
              cat "$file_path"
            echo "::endgroup::"

            echo "::group::Updating"
              if [[ "${file_name}" == "package.json" ]]; then
                # Unity `"version": "VersionString",`
                sed -i -e "s/\(\"version\":\) \"\(.*\)\",/\1 \"${{ needs.validate.outputs.normalized_tag }}\",/" "${file_path}"
                actual=$(grep "version" "$file_path" | cut -d ':' -f 2 | tr -d ',' | tr -d '"' | tr -d ' ')
              elif [[ "${file_name}" == "plugin.cfg" ]]; then
                # Godot `version="VersionString"`
                sed -i -e "s/\(version=\)\"\(.*\)\"/\1\"${{ needs.validate.outputs.normalized_tag }}\"/" "${file_path}"
                actual=$(grep "version=" "$file_path" | cut -d '=' -f 2 | tr -d '"')
              elif [[ "${file_name}" == "Directory.Build.props" ]]; then
                # .NET `<VersionPrefix>VersionString</VersionPrefix>`
                sed -i -e 's|<VersionPrefix>.*</VersionPrefix>|<VersionPrefix>${{ needs.validate.outputs.normalized_tag }}</VersionPrefix>|g' "${file_path}"
                # -P is for perl regex, only available in GNU grep
                actual=$(grep -oP '<VersionPrefix>\K.*(?=</VersionPrefix>)' "$file_path")
              else
                echo "Unknown file name ${file_name} is specified."
                exit 1
              fi
            echo "::endgroup::"

            echo "::group::After"
              cat "$file_path"
            echo "::endgroup::"

            echo "::group::Validate Change"
              if [[ "$actual" != "$expected" ]]; then
                echo "Failed. Path: $file_path, Expected: $expected, Actual: $actual"
                exit 1
              else
                echo "Success. Path: $file_path, Expected: $expected, Actual: $actual"
              fi
            echo "::endgroup::"
          done <<< "${{ inputs.file-path }}"

      - name: Check update on git
        id: check_update
        run: git diff --exit-code || echo "changed=1" | tee -a "$GITHUB_OUTPUT"

      - name: Commit files (updated? = ${{ steps.check_update.outputs.changed == '1' }})
        id: commit
        run: |
          if [[ "${{ steps.check_update.outputs.changed }}" == "1" ]]; then
            git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git commit -m "feat: Update package.json to ${{ needs.validate.outputs.normalized_tag }}" -m "Commit by [GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" -a
            echo "sha=$(git rev-parse HEAD)" | tee -a "$GITHUB_OUTPUT"
            echo "is-branch-created=${{ inputs.dry-run }}" | tee -a "$GITHUB_OUTPUT"
          elif [[ "${{ inputs.ref }}" != "" ]]; then
            echo "sha=$(git rev-parse HEAD)" | tee -a "$GITHUB_OUTPUT"
            echo "is-branch-created=false" | tee -a "$GITHUB_OUTPUT"
          else
            echo "sha=" | tee -a "$GITHUB_OUTPUT"
            echo "is-branch-created=false" | tee -a "$GITHUB_OUTPUT"
          fi

      - name: Push changes
        if: ${{ steps.check_update.outputs.changed == '1' }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ needs.generate-token.outputs.token }}
          branch: ${{ inputs.ref }}
          tags: false
          force: ${{ inputs.dry-run }}